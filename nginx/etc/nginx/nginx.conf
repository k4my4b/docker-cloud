# Defines user and group credentials used by worker processes.
user nginx;

# Defines the number of worker processes. Generally, it should match the number of CPU cores.
worker_processes auto;

# Binds worker processes to specific CPUs to optimize performance.
worker_cpu_affinity auto;

# Customizes the thread pool settings. 'max_queue' defines the maximum number of tasks the queue can hold.
thread_pool default threads=16 max_queue=50000;

# Increase the maximum number of open file descriptors for worker processes.
worker_rlimit_nofile 300000;

# Logging configuration: Log errors to standard error with "notice" log level (change to "error" or "warn" for production use).
error_log /dev/stderr notice;

# Defines a file to store the process ID of the main Nginx process.
pid /var/run/nginx.pid;

events {
    # Maximum number of simultaneous connections a worker process can handle.
    worker_connections 50000;

    # Enables epoll, which is more efficient for handling large numbers of connections on Linux.
    use epoll;

    # Accept as many new connections as possible in one go, rather than one at a time.
    multi_accept on;
}

http {
    # Enable kernel-based file transfer. This improves performance by avoiding unnecessary copying of data between user space and kernel space.
    sendfile on;

    # Use asynchronous file I/O with the default thread pool.
    aio threads;

    # Use direct I/O for files larger than or equal to this size. Direct I/O bypasses the page cache, optimizing large file access.
    directio 6m;

    # Send HTTP headers in one packet to reduce TCP overhead.
    tcp_nopush on;

    # Disable Nagle's algorithm to send data immediately without buffering (better for real-time communications).
    tcp_nodelay on;

    # Disable logging for file not found errors (e.g., 404 errors).
    log_not_found off;

    # Sets the time (in seconds) that a connection will be kept open if there are no further requests.
    keepalive_timeout 60;

    # Increases the size of hash tables used for storing types to improve performance.
    types_hash_max_size 2048;

    # Frees up memory by resetting connections with unresponsive clients, which can help avoid resource exhaustion.
    reset_timedout_connection on;

    # Include MIME types for file extensions.
    include /etc/nginx/mime.types;

    # Sets the default MIME type to 'application/octet-stream' when no match is found in MIME types.
    default_type application/octet-stream;

    # Custom log format using JSON to capture detailed request/response information in a structured format.
    log_format main escape=json
    '{\n'
    '    "remote_addr":"$remote_addr",\n'
    '    "time_local":"$time_local",\n'
    '    "request":"$request",\n'
    '    "status":$status,\n'
    '    "body_bytes_sent":$body_bytes_sent,\n'
    '    "http_referer":"$http_referer",\n'
    '    "http_user_agent":"$http_user_agent",\n'
    '    "http_x_forwarded_for":"$http_x_forwarded_for",\n'
    '    "request_time":"$request_time",\n'
    '    "upstream_connect_time":"$upstream_connect_time",\n'
    '    "upstream_header_time":"$upstream_header_time",\n'
    '    "upstream_response_time":"$upstream_response_time",\n'
    '    "host":"$host"\n'
    '}';

    # Log all access information to stdout using the JSON format defined above.
    access_log /dev/stdout main;

    # Disable gzip compression to prevent issues when Nginx is behind another reverse proxy that might also perform compression.
    gzip off;

    # Explicitly disable gzip for proxied requests to avoid double compression.
    gzip_proxied off;

    # Load additional configuration files from the 'http.d' directory.
    include /etc/nginx/http.d/*.conf;
}
