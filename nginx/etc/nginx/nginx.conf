# Defines user and group credentials used by worker processes.
user nginx;

# Defines the number of worker processes. Generally, it should match the number of CPU cores.
worker_processes auto;

# Binds worker processes to specific CPUs to optimize performance.
worker_cpu_affinity auto;

# Customizes the thread pool settings. 'max_queue' defines the maximum number of tasks the queue can hold.
thread_pool default threads=16 max_queue=50000;

# Increase the maximum number of open file descriptors for worker processes.
worker_rlimit_nofile 300000;

# Logging configuration: Log errors to standard error with "notice" log level (change to "error" or "warn" for production use).
error_log /dev/stderr notice;

# Defines a file to store the process ID of the main Nginx process.
pid /var/run/nginx.pid;

events {
    # Maximum number of simultaneous connections a worker process can handle.
    worker_connections 50000;

    # Enables epoll, which is more efficient for handling large numbers of connections on Linux.
    use epoll;

    # Accept as many new connections as possible in one go, rather than one at a time.
    multi_accept on;
}

http {
    # Enable kernel-based file transfer. This improves performance by avoiding unnecessary copying of data between user space and kernel space.
    sendfile on;

    # Use asynchronous file I/O with the default thread pool.
    aio threads;

    # Use direct I/O for files larger than or equal to this size. Direct I/O bypasses the page cache, optimizing large file access.
    directio 6m;

    # Send HTTP headers in one packet to reduce TCP overhead.
    tcp_nopush on;

    # Disable Nagle's algorithm to send data immediately without buffering (better for real-time communications).
    tcp_nodelay on;

    # Disable logging for file not found errors (e.g., 404 errors).
    log_not_found off;

    # Sets the time (in seconds) that a connection will be kept open if there are no further requests.
    keepalive_timeout 60;

    # Increases the size of hash tables used for storing types to improve performance.
    types_hash_max_size 2048;

    # Frees up memory by resetting connections with unresponsive clients, which can help avoid resource exhaustion.
    reset_timedout_connection on;

    # Include MIME types for file extensions.
    include /etc/nginx/mime.types;

    # Sets the default MIME type to 'application/octet-stream' when no match is found in MIME types.
    default_type application/octet-stream;

    # Custom log format using JSON to capture detailed request/response information in a structured format.
    log_format main escape=json
    '{\n'
    '    "remote_addr":"$remote_addr",\n'
    '    "time_local":"$time_local",\n'
    '    "request":"$request",\n'
    '    "status":$status,\n'
    '    "body_bytes_sent":$body_bytes_sent,\n'
    '    "http_referer":"$http_referer",\n'
    '    "http_user_agent":"$http_user_agent",\n'
    '    "http_x_forwarded_for":"$http_x_forwarded_for",\n'
    '    "request_time":"$request_time",\n'
    '    "upstream_connect_time":"$upstream_connect_time",\n'
    '    "upstream_header_time":"$upstream_header_time",\n'
    '    "upstream_response_time":"$upstream_response_time",\n'
    '    "host":"$host"\n'
    '}';

    # Log all access information to stdout using the JSON format defined above.
    access_log /dev/stdout main;

    # Disable gzip compression to prevent issues when Nginx is behind another reverse proxy that might also perform compression.
    gzip off;

    # Explicitly disable gzip for proxied requests to avoid double compression.
    gzip_proxied off;

    # If we receive X-Forwarded-Proto, pass it through; otherwise, use the scheme (http/https) used to connect to this server.
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        '' $scheme;
    }

    # If we receive X-Forwarded-Port, pass it through; otherwise, use the port the client connected to (e.g., 80 for HTTP or 443 for HTTPS).
    map $http_x_forwarded_port $proxy_x_forwarded_port {
        default $http_x_forwarded_port;
        '' $server_port;
    }

    # If we receive an Upgrade header (e.g., for WebSockets), set the Connection header to "upgrade". Otherwise, close the connection by setting it to "close".
    map $http_upgrade $proxy_connection {
        default upgrade;
        '' close;
    }

    # Set the X-Forwarded-Ssl header to "on" if the request is via HTTPS, otherwise "off".
    map $scheme $proxy_x_forwarded_ssl {
        default off;
        https on;
    }

    # Define the proxy cache path for Nginx. The cache will be stored at /var/cache/nginx/cache with a hierarchical structure (levels=1:2) for file storage.
    # We are allocating 10 MB of shared memory for the cache key metadata. Cached content will be evicted if inactive for 60 minutes.
    # Using `use_temp_path=off` improves performance by writing cache content directly to the final location instead of using temporary storage.
    proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=cache:10m inactive=60m use_temp_path=off;

    # Define the cache key used for caching the responses. The cache key is a combination of scheme, request method, host, and URI to ensure different variations are cached separately.
    proxy_cache_key "$scheme$request_method$host$request_uri";

    server {
        listen 80 default_server so_keepalive=on;
        listen 443 ssl http2 default_server so_keepalive=on;

        # SSL Configuration
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # Only allow modern TLS versions to ensure secure connections. TLSv1.0 and TLSv1.1 are disabled due to vulnerabilities.
        ssl_protocols TLSv1.2 TLSv1.3;

        # Use strong ciphers, excluding weak ciphers like aNULL (anonymous Diffie-Hellman) and MD5, which are not considered secure.
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # Set various proxy headers for the upstream server.
        proxy_set_header Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $proxy_connection;
        proxy_set_header X-Real-IP $remote_addr;                      # Pass client IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;  # Chain client IPs for upstream
        proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
        proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
        proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

        # Mitigate HTTPoxy vulnerability (CVE-2016-5385). HTTP Proxy headers can cause security issues.
        proxy_set_header Proxy "";

        # Enable HTTP/1.1 features like keepalive, chunked transfer, and pipelining.
        proxy_http_version 1.1;

        # Disable buffering to avoid response delays for proxied applications that stream large data, such as WebSockets or long-polling APIs.
        proxy_buffering off;

        # Set appropriate timeouts to handle slow client connections or long-running requests.
        proxy_connect_timeout 10s;   # Max time to connect to upstream server
        proxy_send_timeout 3600s;    # Max time for sending data to the upstream server
        proxy_read_timeout 3600s;    # Max time for reading data from the upstream server
        send_timeout 3600s;          # Max time for transmitting data to the client

        # Enable caching for static responses (like GET requests). Cache 200 OK responses for 10 minutes to improve performance.
        proxy_cache cache;
        proxy_cache_valid 200 10m;

        # Hide potentially sensitive headers from the client to prevent disclosure of internal infrastructure information.
        proxy_hide_header X-Powered-By;
        proxy_hide_header X-AspNet-Version;
        proxy_hide_header X-Backend-Server;
        proxy_hide_header Server;

        # Disable the max body size limit to allow uploads of any size. Set to a specific value like "10M" if you want to limit the upload size.
        client_max_body_size 0;

        # Turn off the server tokens, which prevents the Nginx version from being disclosed in error pages and headers.
        server_tokens off;

        include /etc/nginx/locations/*.location;
    }
}
